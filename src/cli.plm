require "commands/types"

type Command = (str, list<Argument>)

cli_value = none_of([' ', '\t', '\n', '\r']).many1()

double_dash = character('-') >> character('-')
parse_named_argument = double_dash >> identifier >>= fn (name) =>
  spaces >> cli_value.optional() >>= fn (value) => switch value {
    case Some(v) => pure(NamedArgument(name.implode(), v.implode()))
    case None => pure(Option(name.implode()))
  }

parse_positional_argument = cli_value >>= fn (value) =>
  pure(PositionalArgument(value.implode()))

parse_option = character('-') >> cli_value >>= fn (name) =>
  pure(Option(name.implode()))

parse_argument = parse_named_argument.try() <|> parse_positional_argument <|> parse_option

parse_command = cli_value >>= fn (cmd_name) =>
  spaces >> parse_argument.lex().many() >>= fn (args) =>
    pure((cmd_name.implode(), args))

fn parse_command_line(cmds: Handling) {
  args = get_args().slice(2).join(" ").explode()
  if args.length() == 0 {
    help_cmd = cmds.find(fn(cmd) => cmd == "help")

    switch help_cmd {
      case Some(cmd) => cmd("help", [])
      case None => { println("No help command found") unit }
    }
  } else {
    res  = parse_command.run_parser(args)
  
    switch res {
      case (Ok((cmd_name, args)), ?) {
        switch cmds.find(fn(cmdn) => cmdn == cmd_name) {
          case Some(cmd) => cmd(cmd_name, args)
          case None => { println("Command not found") unit }
        }
      }

      case (Error(err), ?) { println("ERROR: $err") unit }
    }
  }
}