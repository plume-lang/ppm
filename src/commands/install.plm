require "../cli"
require "../../library/file"
require "../config"
require "../../library/parser"
native "../ffi/bin/ppm-ffi" str_split(s: str, del: str): [str]

extend<A> (o: Option<A>) {
  fn or(other: A): A {
    switch o {
      case Some(a) => a
      case None => other
    }
  }
}

fn remove_ext(file: str): str {
  parts = str_split(file, ".")
  return switch parts {
    case [name, ..r] => name
    case ? => file
  }
}

cwd_ = get_cwd()

fn create_script_file(file: str, conf: Config, override: bool) {
  switch conf.get("entry") {
    case Some(Value(file_name)) {
      script = "#!/bin/sh\nplume " 
             + (cwd_ or "") 
             + "/" 
             + file_name.remove_ext() 
             + ".bin \"$@\""

      switch get_env("PPM_PATH") {
        case Some(path) => {
          final_path = path + "/bin/" + file

          if does_file_exist(final_path){
            if not override {
              println("File already exists. Use -f or -force to override")
              return 1
            } else { 0 }
            execute_command("rm " + final_path)
          } else { 0 }

          ppm_writefile(final_path, script)
          execute_command("chmod +x " + final_path)
          println("Installed " + file)
          return 0
        }
        case None => println("PPM_PATH not set")
      }
    }
    case Some(_) => println("Entry in plume.config is not a string")
    case None => println("No entry found in plume.config")
  }
}

fn get_config(files: [str]): Option<str> {
  switch files {
    case ["plume.config", ..rest] => Some("plume.config")
    case [?, ..rest] => get_config(rest)
    case [] => None
  }
}

fn cli_install(args: [Argument]) {
  overrides = args.has_flag("f") or (args.has_flag("force") or false)
  config = (get_cwd() or ".") + "/plume.config"
  if not does_file_exist(config) {
    println("No plume.config found")
  } else {
    config_content = ppm_readfile(config) or ""
    res = parse_config.eval_parser(config_content)
    
    switch res {
      case Ok(config) {
        switch config.get("name") {
          case Some(Value(name)) => create_script_file(name, config, overrides)
          case Some(_) => println("Name in plume.config is not a string")
          case None => println("No name found in plume.config")
        }
      }
      case Error(err) => println("Failed to parse: " + err)
    }
  }

  return 1
}