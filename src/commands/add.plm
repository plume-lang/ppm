require "std:io/http-js"
require "../config"
require "../../library/file"
require "../pretty"
require "std:io/system"
require "std:io/file"

fn concats<A extends equality>(ls: list<list<A>>): list<A> {
  return switch ls {
    case [] => []
    case [x, ..xs] => x + concats(xs)
  }
}

fn get_all_packages(config: Config): list<str> {
  pkgs = config.get_packages()

  all_packages = pkgs.map(fn (pkg) {
    url = "https://github.com/$pkg"
    content = fetch(url)
    
    return switch content {
      case Ok(body) => get_all_packages(parse_config(body))
      case Error(?) => []
    }
  })

  all_packages_ = wait_all(all_packages)

  packages = concats(all_packages_) + pkgs
  return packages
}

fn get_all_packages_from(package: str): list<str> {
  url = "https://raw.githubusercontent.com/$package/main/ppm.config"

  content = fetch(url)

  return switch content {
    case Ok(body) => [package] + get_all_packages(parse_config(body))
    case Error(?) => []
  }
}

async fn add_cmd(_, args: list<Argument>): unit {
  pkg_name = args[0].bind(fn (arg) => switch arg {
    case PositionalArgument(value) => Some(value)
    case ? => None
  })

  ppm_path = get_env("PPM_PATH")

  config_main = "$cwd/ppm.config"
  config = read_config(config_main)

  return switch (pkg_name, ppm_path, config) {
    case (Some(name), Some(ppm_path), Some(config)) {
      info("Fetching packages from $name")

      packages = get_all_packages_from(name)

      pkgs_to_be_written = packages.join(", ").join_str("")

      info("Installing $pkgs_to_be_written")
      packages.map(fn (pkg) {
        url = "https://github.com/$pkg"
        pkg_path = "$ppm_path/modules/$pkg"

        if does_directory_exist(pkg_path) {
          warn("Already installed $pkg")
        } else { 
          res = execute_command("git clone $url $pkg_path")

          if res != 0 {
            error("Failed to clone $url")
          } else {
            success("Installed $pkg")
          }
        }
      })

      lock_file = "$cwd/ppm.lock"

      ppm_writefile(lock_file, packages.unlines())
      ppm_writefile(config_main, config.add_package(name).map(show).unlines())

      return success("Added $name to $config_main")
    }

    case ? => error("No PPM_PATH found in environment")
  }
}
