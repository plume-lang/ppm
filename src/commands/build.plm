require "../cli"
require "../../library/file"
require "../config"
require "../../library/parser"
require "install"

infixr 5 <|>

extend<A> (c: Option<A>) {
  fn (<|>) (other: Option<A>): Option<A> {
    switch c {
      case Some(x) => Some(x)
      case None => other
    }
  }
}

extend<A> (cs: [Option<A>]) {
  fn choice(): Option<A> {
    switch cs {
      case [] => None
      case [x, ..xs] => x <|> choice(xs)
    }
  }
}

fn get_c_compiler(c_compilers: [str]): Option<str> {
  switch c_compilers {
    case [] => None
    case [x, ..xs] => which(x) <|> get_c_compiler(xs)
  }
}

fn compile_ffi(ffi_path: str, c_compilers: [str]): Option<str> {
  if not does_file_exist(ffi_path) {
    return Some("FFI file " + ffi_path + " not found")
  } else { None }

  return switch get_c_compiler(c_compilers) {
    case Some(c_compiler) {
      execute_command(c_compiler + " " + ffi_path + " -shared")
      None
    }
    case None => Some("No C compiler found")
  }
}

fn build(): Option<str> {
  config = fetch_config()
  compilers = ["gcc", "clang", "cc", "tcc", "cl"]

  switch config {
    case Ok(config_ast) {
      // Trying to compile FFI library if it is present
      res = switch config_ast.get("native") {
        case Some(ffi_path) => compile_ffi(ffi_path, compilers)
        case None => None
      }

      // Trying to compile the main file

      switch res {
        case None {
          switch config_ast.get("entry") {
            case Some(entry) {
              execute_command("plumec " + entry)
              return Some(entry.remove_ext() + ".bin")
            }
            case None => { println("No entry file specified") None }
          }
        }
        case Some(err) => { println(err) None }
      }
    }
    case Error(err) => { println(err) None }
  }

  return None
}

fn cli_build(args: [Argument]) {
  build()
  return 0
}