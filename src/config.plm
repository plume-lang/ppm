require "../library/parser"
require "../library/char"

type Config { Config([(str, str)]) }

parse_value: Parser<str> = 
  satisfy(fn(c) => is_alphanumeric(c) or c == '-' or c == '_' or c == '/' or c == '.')
    .many1()
    .map(clist_to_str)

parse_parameter: Parser<(str, str)> = identifier >>= fn (name) =>
  spaces >> character(':') >> spaces >> parse_value >>= fn (value) =>
    pure((name, value))

parse_config: Parser<Config> = parse_parameter.sep_by(character('\n')).map(Config)

extend (c: [(str, str)]) {
  fn get(name: str): Option<str> => switch c {
    case [] => None
    case [(n, v), ..rest] => if (n == name) Some(v) else rest.get(name)
  }
}

extend (c: Config) {
  fn show(): str => switch c {
    case Config(options) => options
      .map(fn(tp) => tp.show(show, show))
      .join("\n")
  }

  fn get(name: str): Option<str> => switch c {
    case Config(options) => options.get(name)
  }
}